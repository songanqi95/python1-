def demo(name,name_list):
    name = 123
    name_list = [1, 2, 3]
    print(name)
    print(name_list)

# 函数的内部，针对参数使用赋值语句，不会修改外部的实参变量
gl_name = 6
gl_name_list = [4, 5, 6]
demo(gl_name,gl_name_list)
print(gl_name)
print(gl_name_list)
——————————————————————————————————————————
# 如果传递的参数是可变类型，在函数内部，使用 方法 修改了数据内容，同样那个会影响到外面的数据
def demo(name_list):
    name_list.append(9)
    print(name_list)


gl_name_list = [1, 2, 3]
demo(gl_name_list)
print(gl_name_list)
——————————————————————————————————————————
# 缺省参数，默认正序排列
gl_list = [1, 9, 3]
# 倒序排列
gl_list.sort(reverse=True)
print(gl_list)
# 正序排列，reverse默认值为False
gl_list.sort()
print(gl_list)
______________________________________________
# 指定函数的缺省参数
# 缺省参数放在末尾

def print_info(name, title="", gender=True):
    """

    :param title: 职位
    :param name: 班上同学的姓名
    :param gender:True男生 False女生
    """

    gender_text = "男生"
    if not gender:
        gender_text = "女生"

    print(f'[{title}]{name}是{gender_text}')


print_info("小明", "班长")
print_info("小红", gender=False)
________________________________________________
def sum_numbers(*args):
    num = 0
    print(args)
    for n in args:
        num += n
    return num


result = sum_numbers(1, 2, 3, 4, 5)
print(result)
________________________________________________
# 不推荐
def sum_numbers(args):

    num = 0

    print(args)
    for n in args:
        num += n
    return num


result = sum_numbers((1, 2, 3, 4, 5))
print(result)
——————————————————————————————————————————————
def demo(*args, **kwargs):

    print(args)
    print(kwargs)


# 元组变量/字典变量
gl_nums = (1, 2, 3)
gl_dict = {"name": "小明", "age": 18}

demo(gl_nums, gl_dict)
